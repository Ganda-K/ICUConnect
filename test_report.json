{
  "summary": {
    "total_tests": 15,
    "passed_tests": 1,
    "failed_tests": 14,
    "total_duration": 224.9854030609131
  },
  "system_performance": {
    "cpu_usage": 19.5,
    "memory_usage": 74.9,
    "disk_usage": 86.0
  },
  "detailed_results": {
    "unit_basic_functionality": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 18 items / 18 deselected / 0 selected\n\n=========================== 18 deselected in 0.08s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 29.806528568267822
    },
    "unit_edge_cases": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 18 items / 18 deselected / 0 selected\n\n=========================== 18 deselected in 0.03s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 3.5635244846343994
    },
    "unit_invalid_data_handling": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 18 items / 18 deselected / 0 selected\n\n=========================== 18 deselected in 0.03s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 3.0871164798736572
    },
    "unit_boundary_conditions": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 18 items / 18 deselected / 0 selected\n\n=========================== 18 deselected in 0.03s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 3.01168155670166
    },
    "integration": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 17 items / 17 deselected / 0 selected\n\n=========================== 17 deselected in 0.05s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 3.1824707984924316
    },
    "functional": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 10 items / 10 deselected / 0 selected\n\n=========================== 10 deselected in 0.16s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 3.456273317337036
    },
    "performance_10_concurrent": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 1 item / 1 deselected / 0 selected\n\n============================ 1 deselected in 0.05s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 3.3380966186523438
    },
    "performance_50_concurrent": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 1 item / 1 deselected / 0 selected\n\n============================ 1 deselected in 0.03s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 3.3009517192840576
    },
    "performance_100_concurrent": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 1 item / 1 deselected / 0 selected\n\n============================ 1 deselected in 0.03s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 2.981616497039795
    },
    "validation": {
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 1 item\n\ntests/test_models.py::TestReferralRequest::test_referral_escalation_logic PASSED [100%]\n\n============================== warnings summary ===============================\ntests/test_models.py::TestReferralRequest::test_referral_escalation_logic\ntests/test_models.py::TestReferralRequest::test_referral_escalation_logic\ntests/test_models.py::TestReferralRequest::test_referral_escalation_logic\ntests/test_models.py::TestReferralRequest::test_referral_escalation_logic\n  C:\\Users\\Administrator\\Auth\\migrations\\env.py:21: DeprecationWarning: 'get_engine' is deprecated and will be removed in Flask-SQLAlchemy 3.2. Use 'engine' or 'engines[key]' instead. If you're using Flask-Migrate or Alembic, you'll need to update your 'env.py' file.\n    return current_app.extensions['migrate'].db.get_engine()\n\ntests/test_models.py::TestReferralRequest::test_referral_escalation_logic\n  C:\\Users\\Administrator\\Auth\\tests\\test_models.py:202: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    old_time = datetime.utcnow() - timedelta(hours=2)\n\ntests/test_models.py::TestReferralRequest::test_referral_escalation_logic\n  C:\\Users\\Administrator\\Auth\\app\\models.py:279: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    return (datetime.utcnow() - self.created_at).total_seconds() / 60  # in minutes\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 6 warnings in 3.01s ========================\n",
      "stderr": "",
      "return_code": 0,
      "duration": 6.53492283821106
    },
    "coverage": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollected 56 items\n\ntests\\test_api.py EEEEEEEEEEEEEEEEE                                      [ 30%]\ntests\\test_functional.py EEEEEEEEEE                                      [ 48%]\ntests\\test_models.py EEEEEEEEEEEEEEEEEE                                  [ 80%]\ntests\\test_performance.py EEEEEEEEEEE                                    [100%]\n\n=================================== ERRORS ====================================\n______________ ERROR at setup of TestAuthAPI.test_login_success _______________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F12B4650>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251DE612210>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F1189B20>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251DE612210>\ncursor = <cursor object at 0x00000251F12D4AC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 9, 460350), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 9, 460350), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F1189B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251DE612210>\ncursor = <cursor object at 0x00000251F12D4AC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 9, 460350), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 9, 460350), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F1189B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 9, 460350), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 9, 460350), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________ ERROR at setup of TestAuthAPI.test_login_invalid_credentials _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2EBBFB0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F13656A0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F1412600>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F13656A0>\ncursor = <cursor object at 0x00000251F13FC4A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 11, 531337), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 11, 531337), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F1412600>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F13656A0>\ncursor = <cursor object at 0x00000251F13FC4A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 11, 531337), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 11, 531337), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F1412600>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 11, 531337), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 11, 531337), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n__________ ERROR at setup of TestReferralAPI.test_initiate_referral ___________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2C502F0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2EA5550>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2C51B20>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2EA5550>\ncursor = <cursor object at 0x00000251F2CFCC80; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 13, 757471), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 13, 757471), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2C51B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2EA5550>\ncursor = <cursor object at 0x00000251F2CFCC80; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 13, 757471), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 13, 757471), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2C51B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 13, 757471), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 13, 757471), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n__________ ERROR at setup of TestReferralAPI.test_pending_referrals ___________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3136450>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2C51C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3137A40>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2C51C40>\ncursor = <cursor object at 0x00000251F304F220; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 15, 419004), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 15, 419004), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3137A40>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2C51C40>\ncursor = <cursor object at 0x00000251F304F220; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 15, 419004), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 15, 419004), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3137A40>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 15, 419004), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 15, 419004), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_________ ERROR at setup of TestReferralAPI.test_respond_to_referral __________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3205AC0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F307B890>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2C4CD70>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F307B890>\ncursor = <cursor object at 0x00000251F0F79FC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 17, 442012), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 17, 442012), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2C4CD70>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F307B890>\ncursor = <cursor object at 0x00000251F0F79FC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 17, 442012), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 17, 442012), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2C4CD70>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 17, 442012), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 17, 442012), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n__________ ERROR at setup of TestReferralAPI.test_escalate_referral ___________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2C525A0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2F035C0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F242E6F0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2F035C0>\ncursor = <cursor object at 0x00000251F2D11FC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 19, 88983), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 19, 88983), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F242E6F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2F035C0>\ncursor = <cursor object at 0x00000251F2D11FC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 19, 88983), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 19, 88983), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F242E6F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 19, 88983), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 19, 88983), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___________ ERROR at setup of TestTransferAPI.test_create_transfer ____________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F25CB680>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F0F71C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F25BE720>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F0F71C40>\ncursor = <cursor object at 0x00000251F28A8D60; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 20, 780814), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 20, 780814), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F25BE720>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F0F71C40>\ncursor = <cursor object at 0x00000251F28A8D60; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 20, 780814), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 20, 780814), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F25BE720>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 20, 780814), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 20, 780814), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___________ ERROR at setup of TestTransferAPI.test_active_transfers ___________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2839520>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F25C9C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2423440>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F25C9C40>\ncursor = <cursor object at 0x00000251F32AFD80; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 22, 442668), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 22, 442668), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2423440>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F25C9C40>\ncursor = <cursor object at 0x00000251F32AFD80; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 22, 442668), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 22, 442668), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2423440>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 22, 442668), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 22, 442668), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________ ERROR at setup of TestTransferAPI.test_update_transfer_status ________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F37AE450>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F32E6B70>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F37C1B20>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F32E6B70>\ncursor = <cursor object at 0x00000251F3722260; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 24, 60397), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 24, 60397), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F37C1B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F32E6B70>\ncursor = <cursor object at 0x00000251F3722260; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 24, 60397), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 24, 60397), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F37C1B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 24, 60397), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 24, 60397), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n____________ ERROR at setup of TestAdmissionAPI.test_admit_patient ____________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251DE611DF0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F37ADF70>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2EA66F0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F37ADF70>\ncursor = <cursor object at 0x00000251F1421C40; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 25, 802784), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 25, 802784), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2EA66F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F37ADF70>\ncursor = <cursor object at 0x00000251F1421C40; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 25, 802784), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 25, 802784), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2EA66F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 25, 802784), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 25, 802784), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___________ ERROR at setup of TestAdmissionAPI.test_available_beds ____________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2C53FB0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2CD1670>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F1106420>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2CD1670>\ncursor = <cursor object at 0x00000251F376B5A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 27, 543840), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 27, 543840), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F1106420>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2CD1670>\ncursor = <cursor object at 0x00000251F376B5A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 27, 543840), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 27, 543840), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F1106420>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 27, 543840), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 27, 543840), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___________ ERROR at setup of TestUserSettingsAPI.test_get_settings ___________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2EC8530>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F0F73140>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F308B500>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F0F73140>\ncursor = <cursor object at 0x00000251F374D460; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 29, 265634), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 29, 265634), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F308B500>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F0F73140>\ncursor = <cursor object at 0x00000251F374D460; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 29, 265634), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 29, 265634), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F308B500>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 29, 265634), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 29, 265634), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_________ ERROR at setup of TestUserSettingsAPI.test_update_settings __________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F39095B0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2BE9C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3918F20>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2BE9C40>\ncursor = <cursor object at 0x00000251F38BFAE0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 30, 944118), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 30, 944118), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3918F20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2BE9C40>\ncursor = <cursor object at 0x00000251F38BFAE0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 30, 944118), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 30, 944118), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3918F20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 30, 944118), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 30, 944118), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n____________ ERROR at setup of TestErrorHandling.test_invalid_json ____________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2BED250>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3919C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F39087D0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3919C40>\ncursor = <cursor object at 0x00000251F2CEA5E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 32, 762703), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 32, 762703), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F39087D0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3919C40>\ncursor = <cursor object at 0x00000251F2CEA5E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 32, 762703), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 32, 762703), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F39087D0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 32, 762703), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 32, 762703), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n______ ERROR at setup of TestErrorHandling.test_missing_required_fields _______\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3190950>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2BFB740>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F37C0950>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2BFB740>\ncursor = <cursor object at 0x00000251F3514040; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 34, 393017), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 34, 393017), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F37C0950>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2BFB740>\ncursor = <cursor object at 0x00000251F3514040; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 34, 393017), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 34, 393017), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F37C0950>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 34, 393017), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 34, 393017), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________ ERROR at setup of TestErrorHandling.test_unauthorized_access _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2EF2C00>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2B3ACC0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2EF2AE0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2B3ACC0>\ncursor = <cursor object at 0x00000251F347E5E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 36, 55590), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 36, 55590), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2EF2AE0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2B3ACC0>\ncursor = <cursor object at 0x00000251F347E5E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 36, 55590), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 36, 55590), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2EF2AE0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 36, 55590), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 36, 55590), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________ ERROR at setup of TestErrorHandling.test_invalid_transfer_id _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3D7D8B0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F34D6BA0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2B2F560>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F34D6BA0>\ncursor = <cursor object at 0x00000251F34F8660; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 37, 688280), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 37, 688280), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2B2F560>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F34D6BA0>\ncursor = <cursor object at 0x00000251F34F8660; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 37, 688280), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 37, 688280), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2B2F560>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 18, 37, 688280), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 18, 37, 688280), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___ ERROR at setup of TestFunctionalWorkflows.test_hospital_admin_workflow ____\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3C5AA80>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3D59670>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3DE9790>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3D59670>\ncursor = <cursor object at 0x00000251F3CBBD80; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 7, 741692), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 7, 741692), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3DE9790>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3D59670>\ncursor = <cursor object at 0x00000251F3CBBD80; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 7, 741692), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 7, 741692), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3DE9790>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 7, 741692), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 7, 741692), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___ ERROR at setup of TestFunctionalWorkflows.test_doctor_referral_workflow ___\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3432FF0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3C59C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3D7C530>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3C59C40>\ncursor = <cursor object at 0x00000251F2B5F140; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 9, 677245), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 9, 677245), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3D7C530>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3C59C40>\ncursor = <cursor object at 0x00000251F2B5F140; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 9, 677245), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 9, 677245), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3D7C530>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 9, 677245), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 9, 677245), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n__ ERROR at setup of TestFunctionalWorkflows.test_nurse_monitoring_workflow ___\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F30358B0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F38B3740>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F285A840>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F38B3740>\ncursor = <cursor object at 0x00000251F37510E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 11, 417987), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 11, 417987), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F285A840>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F38B3740>\ncursor = <cursor object at 0x00000251F37510E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 11, 417987), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 11, 417987), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F285A840>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 11, 417987), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 11, 417987), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___ ERROR at setup of TestFunctionalWorkflows.test_cross_hospital_workflow ____\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2BEC290>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F285A930>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3919040>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F285A930>\ncursor = <cursor object at 0x00000251F3CBF300; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 13, 487915), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 13, 487915), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3919040>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F285A930>\ncursor = <cursor object at 0x00000251F3CBF300; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 13, 487915), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 13, 487915), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3919040>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 13, 487915), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 13, 487915), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_____ ERROR at setup of TestFunctionalWorkflows.test_notification_system ______\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3C8C500>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3C7A000>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3D36990>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3C7A000>\ncursor = <cursor object at 0x00000251F3C751C0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 15, 149468), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 15, 149468), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3D36990>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3C7A000>\ncursor = <cursor object at 0x00000251F3C751C0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 15, 149468), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 15, 149468), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3D36990>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 15, 149468), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 15, 149468), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n______ ERROR at setup of TestFunctionalWorkflows.test_real_time_updates _______\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F33E2FF0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3349C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3C60C20>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3349C40>\ncursor = <cursor object at 0x00000251F3CF3E60; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 16, 971115), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 16, 971115), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3C60C20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3349C40>\ncursor = <cursor object at 0x00000251F3CF3E60; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 16, 971115), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 16, 971115), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3C60C20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 16, 971115), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 16, 971115), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_______ ERROR at setup of TestFunctionalWorkflows.test_form_validation ________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3D3A5A0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3C61C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3D7D280>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3C61C40>\ncursor = <cursor object at 0x00000251F3D44F20; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 18, 646828), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 18, 646828), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3D7D280>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3C61C40>\ncursor = <cursor object at 0x00000251F3D44F20; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 18, 646828), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 18, 646828), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3D7D280>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 18, 646828), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 18, 646828), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n______ ERROR at setup of TestFunctionalWorkflows.test_responsive_design _______\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F391BFB0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2581C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F38BAAE0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2581C40>\ncursor = <cursor object at 0x00000251F3354D60; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 20, 449773), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 20, 449773), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F38BAAE0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2581C40>\ncursor = <cursor object at 0x00000251F3354D60; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 20, 449773), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 20, 449773), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F38BAAE0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 20, 449773), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 20, 449773), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n__ ERROR at setup of TestCrossBrowserCompatibility.test_chrome_compatibility __\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2963800>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3D59C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2926B70>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3D59C40>\ncursor = <cursor object at 0x00000251F29FB760; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 24, 229145), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 24, 229145), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2926B70>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3D59C40>\ncursor = <cursor object at 0x00000251F29FB760; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 24, 229145), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 24, 229145), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2926B70>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 24, 229145), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 24, 229145), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_ ERROR at setup of TestCrossBrowserCompatibility.test_firefox_compatibility __\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3924500>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2961C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3926330>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2961C40>\ncursor = <cursor object at 0x00000251F4025620; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 25, 765668), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 25, 765668), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3926330>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2961C40>\ncursor = <cursor object at 0x00000251F4025620; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 25, 765668), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 25, 765668), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3926330>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 25, 765668), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 25, 765668), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n____________ ERROR at setup of TestHospital.test_hospital_creation ____________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F29888F0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F4061C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F4063680>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F4061C40>\ncursor = <cursor object at 0x00000251F2DB4040; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 27, 382871), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 27, 382871), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F4063680>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F4061C40>\ncursor = <cursor object at 0x00000251F2DB4040; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 27, 382871), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 27, 382871), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F4063680>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 27, 382871), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 27, 382871), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___________ ERROR at setup of TestHospital.test_hospital_properties ___________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F344FB90>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F410CD70>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F38F76E0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F410CD70>\ncursor = <cursor object at 0x00000251F33AB840; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 29, 91087), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 29, 91087), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F38F76E0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F410CD70>\ncursor = <cursor object at 0x00000251F33AB840; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 29, 91087), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 29, 91087), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F38F76E0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 29, 91087), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 29, 91087), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n____________ ERROR at setup of TestHospital.test_hospital_timezone ____________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F410E450>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2EF1670>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2965D00>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2EF1670>\ncursor = <cursor object at 0x00000251F3941B60; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 30, 657636), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 30, 657636), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2965D00>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2EF1670>\ncursor = <cursor object at 0x00000251F3941B60; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 30, 657636), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 30, 657636), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2965D00>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 30, 657636), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 30, 657636), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________________ ERROR at setup of TestUser.test_user_creation ________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3A21730>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2DB1B20>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3A22270>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2DB1B20>\ncursor = <cursor object at 0x00000251F3A57D80; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 32, 304573), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 32, 304573), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3A22270>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2DB1B20>\ncursor = <cursor object at 0x00000251F3A57D80; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 32, 304573), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 32, 304573), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3A22270>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 32, 304573), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 32, 304573), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_________________ ERROR at setup of TestUser.test_user_get_id _________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3F9BFB0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3A21C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2724920>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3A21C40>\ncursor = <cursor object at 0x00000251F27F5C40; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 33, 950556), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 33, 950556), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2724920>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3A21C40>\ncursor = <cursor object at 0x00000251F27F5C40; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 33, 950556), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 33, 950556), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2724920>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 33, 950556), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 33, 950556), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_______ ERROR at setup of TestUserSettings.test_user_settings_creation ________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F298BFB0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F0F8EB40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F343C8F0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F0F8EB40>\ncursor = <cursor object at 0x00000251F3A02C00; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 35, 676694), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 35, 676694), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F343C8F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F0F8EB40>\ncursor = <cursor object at 0x00000251F3A02C00; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 35, 676694), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 35, 676694), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F343C8F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 35, 676694), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 35, 676694), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_______ ERROR at setup of TestUserSettings.test_user_settings_defaults ________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F298ACC0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2889C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3C8A840>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2889C40>\ncursor = <cursor object at 0x00000251F27EE880; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 37, 354903), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 37, 354903), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3C8A840>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2889C40>\ncursor = <cursor object at 0x00000251F27EE880; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 37, 354903), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 37, 354903), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3C8A840>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 37, 354903), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 37, 354903), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_________________ ERROR at setup of TestBed.test_bed_creation _________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3C60E00>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2989C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3F86B70>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2989C40>\ncursor = <cursor object at 0x00000251F3F349E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 39, 144306), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 39, 144306), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3F86B70>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2989C40>\ncursor = <cursor object at 0x00000251F3F349E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 39, 144306), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 39, 144306), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3F86B70>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 39, 144306), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 39, 144306), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________________ ERROR at setup of TestBed.test_bed_uniqueness ________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3A47110>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3FB9C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3717D10>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3FB9C40>\ncursor = <cursor object at 0x00000251F36F2C00; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 40, 930083), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 40, 930083), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3717D10>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3FB9C40>\ncursor = <cursor object at 0x00000251F36F2C00; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 40, 930083), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 40, 930083), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3717D10>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 40, 930083), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 40, 930083), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________ ERROR at setup of TestReferralRequest.test_referral_creation _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3F258B0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F36E9C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3F266F0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F36E9C40>\ncursor = <cursor object at 0x00000251F0F84580; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 42, 733337), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 42, 733337), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3F266F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F36E9C40>\ncursor = <cursor object at 0x00000251F0F84580; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 42, 733337), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 42, 733337), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3F266F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 42, 733337), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 42, 733337), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_____ ERROR at setup of TestReferralRequest.test_referral_time_properties _____\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3FB8200>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3FBB020>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F39B5DC0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3FBB020>\ncursor = <cursor object at 0x00000251F299C120; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 44, 365079), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 44, 365079), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F39B5DC0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3FBB020>\ncursor = <cursor object at 0x00000251F299C120; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 44, 365079), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 44, 365079), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F39B5DC0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 44, 365079), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 44, 365079), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n____ ERROR at setup of TestReferralRequest.test_referral_escalation_logic _____\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3C608F0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3459FD0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2F57320>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3459FD0>\ncursor = <cursor object at 0x00000251F2F2A500; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 46, 26296), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 46, 26296), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2F57320>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3459FD0>\ncursor = <cursor object at 0x00000251F2F2A500; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 46, 26296), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 46, 26296), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2F57320>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 46, 26296), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 46, 26296), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________ ERROR at setup of TestPatientTransfer.test_transfer_creation _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2F4F860>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2F4FF80>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F441B860>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2F4FF80>\ncursor = <cursor object at 0x00000251F3588820; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 47, 719340), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 47, 719340), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F441B860>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2F4FF80>\ncursor = <cursor object at 0x00000251F3588820; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 47, 719340), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 47, 719340), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F441B860>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 47, 719340), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 47, 719340), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_____ ERROR at setup of TestPatientTransfer.test_transfer_time_properties _____\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3E83AA0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F35D4560>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3E82840>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F35D4560>\ncursor = <cursor object at 0x00000251F3E52A40; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 49, 492021), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 49, 492021), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3E82840>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F35D4560>\ncursor = <cursor object at 0x00000251F3E52A40; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 49, 492021), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 49, 492021), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3E82840>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 49, 492021), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 49, 492021), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________ ERROR at setup of TestPatientTransfer.test_transfer_duration _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3715FD0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3609550>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2F45790>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3609550>\ncursor = <cursor object at 0x00000251F2FC3680; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 51, 280038), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 51, 280038), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2F45790>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3609550>\ncursor = <cursor object at 0x00000251F2FC3680; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 51, 280038), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 51, 280038), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2F45790>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 51, 280038), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 51, 280038), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___________ ERROR at setup of TestAdmission.test_admission_creation ___________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3F26B40>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2FF9670>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3FCCB00>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2FF9670>\ncursor = <cursor object at 0x00000251F3DDF060; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 52, 909936), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 52, 909936), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3FCCB00>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2FF9670>\ncursor = <cursor object at 0x00000251F3DDF060; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 52, 909936), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 52, 909936), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3FCCB00>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 52, 909936), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 52, 909936), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n__________ ERROR at setup of TestAdmission.test_admission_properties __________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3F263F0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3FC9670>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3E7AE70>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3FC9670>\ncursor = <cursor object at 0x00000251F4731540; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 54, 571523), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 54, 571523), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3E7AE70>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3FC9670>\ncursor = <cursor object at 0x00000251F4731540; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 54, 571523), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 54, 571523), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3E7AE70>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 54, 571523), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 54, 571523), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_______ ERROR at setup of TestAdmission.test_admission_time_properties ________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F29885C0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F47ECD10>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2AFA840>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F47ECD10>\ncursor = <cursor object at 0x00000251F2A6F5A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 56, 174816), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 56, 174816), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2AFA840>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F47ECD10>\ncursor = <cursor object at 0x00000251F2A6F5A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 56, 174816), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 56, 174816), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2AFA840>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 56, 174816), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 56, 174816), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n____ ERROR at setup of TestPerformance.test_referral_creation_performance _____\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F2AFA390>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2AF9C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2A65CA0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2AF9C40>\ncursor = <cursor object at 0x00000251F3E43BC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 58, 86726), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 58, 86726), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2A65CA0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2AF9C40>\ncursor = <cursor object at 0x00000251F3E43BC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 58, 86726), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 58, 86726), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2A65CA0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 58, 86726), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 58, 86726), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_____ ERROR at setup of TestPerformance.test_concurrent_referral_creation _____\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F35FAA80>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F47F11C0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F44176E0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F47F11C0>\ncursor = <cursor object at 0x00000251F43625E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 59, 732805), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 59, 732805), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F44176E0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F47F11C0>\ncursor = <cursor object at 0x00000251F43625E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 59, 732805), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 59, 732805), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F44176E0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 19, 59, 732805), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 19, 59, 732805), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n______ ERROR at setup of TestPerformance.test_database_query_performance ______\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F3FE8DD0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3E74590>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2FF9B20>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3E74590>\ncursor = <cursor object at 0x00000251F3EA2EA0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 1, 520845), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 1, 520845), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2FF9B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F3E74590>\ncursor = <cursor object at 0x00000251F3EA2EA0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 1, 520845), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 1, 520845), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2FF9B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 1, 520845), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 1, 520845), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_____________ ERROR at setup of TestPerformance.test_memory_usage _____________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F39B7440>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2FF9C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F48F6D20>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2FF9C40>\ncursor = <cursor object at 0x00000251F48C9540; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 3, 168370), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 3, 168370), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F48F6D20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2FF9C40>\ncursor = <cursor object at 0x00000251F48C9540; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 3, 168370), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 3, 168370), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F48F6D20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 3, 168370), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 3, 168370), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n__ ERROR at setup of TestPerformance.test_notification_duration_calculation ___\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F48E6DB0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F48EDAC0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2711B20>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F48EDAC0>\ncursor = <cursor object at 0x00000251F2697760; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 4, 859545), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 4, 859545), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2711B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F48EDAC0>\ncursor = <cursor object at 0x00000251F2697760; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 4, 859545), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 4, 859545), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F2711B20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 4, 859545), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 4, 859545), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_______ ERROR at setup of TestPerformance.test_transfer_status_updates ________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F48ECB00>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2649C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3FE8C20>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2649C40>\ncursor = <cursor object at 0x00000251F4A019A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 6, 772141), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 6, 772141), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3FE8C20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2649C40>\ncursor = <cursor object at 0x00000251F4A019A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 6, 772141), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 6, 772141), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F3FE8C20>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 6, 772141), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 6, 772141), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_____ ERROR at setup of TestPerformance.test_escalation_logic_performance _____\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F47EFB90>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F345B560>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F39B7AA0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F345B560>\ncursor = <cursor object at 0x00000251F47799A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 8, 418377), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 8, 418377), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F39B7AA0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F345B560>\ncursor = <cursor object at 0x00000251F47799A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 8, 418377), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 8, 418377), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F39B7AA0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 8, 418377), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 8, 418377), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n________ ERROR at setup of TestLoadTesting.test_high_concurrent_users _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F26751F0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F48A1C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F433F200>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F48A1C40>\ncursor = <cursor object at 0x00000251F2633BC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 10, 301785), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 10, 301785), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F433F200>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F48A1C40>\ncursor = <cursor object at 0x00000251F2633BC0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 10, 301785), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 10, 301785), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F433F200>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 10, 301785), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 10, 301785), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_______ ERROR at setup of TestLoadTesting.test_database_connection_pool _______\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F50D49E0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2625940>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F5049D90>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2625940>\ncursor = <cursor object at 0x00000251F448A0A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 11, 947484), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 11, 947484), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F5049D90>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F2625940>\ncursor = <cursor object at 0x00000251F448A0A0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 11, 947484), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 11, 947484), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F5049D90>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 11, 947484), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 11, 947484), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n_____ ERROR at setup of TestStressTesting.test_large_dataset_performance ______\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F4B241D0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F5049C40>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F4B266F0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F5049C40>\ncursor = <cursor object at 0x00000251F4488BA0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 14, 379923), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 14, 379923), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F4B266F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F5049C40>\ncursor = <cursor object at 0x00000251F4488BA0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 14, 379923), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 14, 379923), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F4B266F0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 14, 379923), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 14, 379923), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n___________ ERROR at setup of TestStressTesting.test_error_recovery ___________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000251F4B24C80>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F44D3CE0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F50D7A40>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F44D3CE0>\ncursor = <cursor object at 0x00000251F3D84740; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 16, 40438), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 16, 40438), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F50D7A40>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000251F44D3CE0>\ncursor = <cursor object at 0x00000251F3D84740; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 16, 40438), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 16, 40438), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000251F50D7A40>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 16, 40438), 'verification_code__0': 'TEST001', 'longitude__0': 34.7617, 'timezone__0': 'Africa/Kigali', 'is_active__0': True, 'name__0': 'Test Hospital 1', 'level__0': 1, 'notification_duration__0': 120, 'latitude__0': -0.1022, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 16, 40438), 'verification_code__1': 'TEST002', 'longitude__1': 34.7618, 'timezone__1': 'Africa/Kigali', 'is_active__1': True, 'name__1': 'Test Hospital 2', 'level__1': 2, 'notification_duration__1': 180, 'latitude__1': -0.1023}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_requests_id_seq' as owned by integer column 'referral_requests(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n============================== warnings summary ===============================\ntests/test_api.py: 68 warnings\ntests/test_functional.py: 40 warnings\ntests/test_models.py: 72 warnings\ntests/test_performance.py: 44 warnings\n  C:\\Users\\Administrator\\Auth\\migrations\\env.py:21: DeprecationWarning: 'get_engine' is deprecated and will be removed in Flask-SQLAlchemy 3.2. Use 'engine' or 'engines[key]' instead. If you're using Flask-Migrate or Alembic, you'll need to update your 'env.py' file.\n    return current_app.extensions['migrate'].db.get_engine()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=============================== tests coverage ================================\n_______________ coverage: platform win32, python 3.12.1-final-0 _______________\n\nName                              Stmts   Miss  Cover   Missing\n---------------------------------------------------------------\napp\\__init__.py                      87     27    69%   45-50, 77-88, 106, 109, 121-139\napp\\models.py                       277     51    82%   27, 31, 40, 60, 63, 66, 85, 88, 92, 128, 134-141, 159, 183, 188, 193, 197, 201-203, 221, 226, 230, 234, 279, 284-291, 320, 366, 371, 376, 381-383, 388-390, 393, 422\napp\\routes\\__init__.py                0      0   100%\napp\\routes\\admin.py                  38     19    50%   13-15, 22-26, 32-47\napp\\routes\\admission_routes.py       95     72    24%   16-103, 120-122, 127-140, 150-219, 227-261\napp\\routes\\auth.py                   71     57    20%   15-51, 55-125, 132-133\napp\\routes\\discharge_routes.py      106     82    23%   15-39, 53-68, 74-175, 183-217, 225-246\napp\\routes\\main.py                   24     12    50%   9, 15-36, 42-44\napp\\routes\\prediction_routes.py     240    215    10%   17-24, 29-174, 179-202, 207-218, 226-258, 269-345, 353-400\napp\\routes\\referral_routes.py       201    163    19%   16, 24, 33-58, 66-87, 95-181, 190-315, 324-375, 384-469, 478-520, 529-541, 548-560\napp\\routes\\transfer_routes.py        89     68    24%   15-64, 73-118, 127-170, 179-232, 239-262\napp\\routes\\user_routes.py           102     76    25%   13-33, 41, 47-50, 56-67, 72-143, 151-154, 162-165\napp\\utils.py                         37     27    27%   8-11, 15-23, 27-35, 39-40, 44, 48-52\n---------------------------------------------------------------\nTOTAL                              1367    869    36%\nCoverage HTML written to dir htmlcov\n=========================== short test summary info ===========================\nERROR tests/test_api.py::TestAuthAPI::test_login_success - sqlalchemy.exc.Int...\nERROR tests/test_api.py::TestAuthAPI::test_login_invalid_credentials - sqlalc...\nERROR tests/test_api.py::TestReferralAPI::test_initiate_referral - sqlalchemy...\nERROR tests/test_api.py::TestReferralAPI::test_pending_referrals - sqlalchemy...\nERROR tests/test_api.py::TestReferralAPI::test_respond_to_referral - sqlalche...\nERROR tests/test_api.py::TestReferralAPI::test_escalate_referral - sqlalchemy...\nERROR tests/test_api.py::TestTransferAPI::test_create_transfer - sqlalchemy.e...\nERROR tests/test_api.py::TestTransferAPI::test_active_transfers - sqlalchemy....\nERROR tests/test_api.py::TestTransferAPI::test_update_transfer_status - sqlal...\nERROR tests/test_api.py::TestAdmissionAPI::test_admit_patient - sqlalchemy.ex...\nERROR tests/test_api.py::TestAdmissionAPI::test_available_beds - sqlalchemy.e...\nERROR tests/test_api.py::TestUserSettingsAPI::test_get_settings - sqlalchemy....\nERROR tests/test_api.py::TestUserSettingsAPI::test_update_settings - sqlalche...\nERROR tests/test_api.py::TestErrorHandling::test_invalid_json - sqlalchemy.ex...\nERROR tests/test_api.py::TestErrorHandling::test_missing_required_fields - sq...\nERROR tests/test_api.py::TestErrorHandling::test_unauthorized_access - sqlalc...\nERROR tests/test_api.py::TestErrorHandling::test_invalid_transfer_id - sqlalc...\nERROR tests/test_functional.py::TestFunctionalWorkflows::test_hospital_admin_workflow\nERROR tests/test_functional.py::TestFunctionalWorkflows::test_doctor_referral_workflow\nERROR tests/test_functional.py::TestFunctionalWorkflows::test_nurse_monitoring_workflow\nERROR tests/test_functional.py::TestFunctionalWorkflows::test_cross_hospital_workflow\nERROR tests/test_functional.py::TestFunctionalWorkflows::test_notification_system\nERROR tests/test_functional.py::TestFunctionalWorkflows::test_real_time_updates\nERROR tests/test_functional.py::TestFunctionalWorkflows::test_form_validation\nERROR tests/test_functional.py::TestFunctionalWorkflows::test_responsive_design\nERROR tests/test_functional.py::TestCrossBrowserCompatibility::test_chrome_compatibility\nERROR tests/test_functional.py::TestCrossBrowserCompatibility::test_firefox_compatibility\nERROR tests/test_models.py::TestHospital::test_hospital_creation - sqlalchemy...\nERROR tests/test_models.py::TestHospital::test_hospital_properties - sqlalche...\nERROR tests/test_models.py::TestHospital::test_hospital_timezone - sqlalchemy...\nERROR tests/test_models.py::TestUser::test_user_creation - sqlalchemy.exc.Int...\nERROR tests/test_models.py::TestUser::test_user_get_id - sqlalchemy.exc.Integ...\nERROR tests/test_models.py::TestUserSettings::test_user_settings_creation - s...\nERROR tests/test_models.py::TestUserSettings::test_user_settings_defaults - s...\nERROR tests/test_models.py::TestBed::test_bed_creation - sqlalchemy.exc.Integ...\nERROR tests/test_models.py::TestBed::test_bed_uniqueness - sqlalchemy.exc.Int...\nERROR tests/test_models.py::TestReferralRequest::test_referral_creation - sql...\nERROR tests/test_models.py::TestReferralRequest::test_referral_time_properties\nERROR tests/test_models.py::TestReferralRequest::test_referral_escalation_logic\nERROR tests/test_models.py::TestPatientTransfer::test_transfer_creation - sql...\nERROR tests/test_models.py::TestPatientTransfer::test_transfer_time_properties\nERROR tests/test_models.py::TestPatientTransfer::test_transfer_duration - sql...\nERROR tests/test_models.py::TestAdmission::test_admission_creation - sqlalche...\nERROR tests/test_models.py::TestAdmission::test_admission_properties - sqlalc...\nERROR tests/test_models.py::TestAdmission::test_admission_time_properties - s...\nERROR tests/test_performance.py::TestPerformance::test_referral_creation_performance\nERROR tests/test_performance.py::TestPerformance::test_concurrent_referral_creation\nERROR tests/test_performance.py::TestPerformance::test_database_query_performance\nERROR tests/test_performance.py::TestPerformance::test_memory_usage - sqlalch...\nERROR tests/test_performance.py::TestPerformance::test_notification_duration_calculation\nERROR tests/test_performance.py::TestPerformance::test_transfer_status_updates\nERROR tests/test_performance.py::TestPerformance::test_escalation_logic_performance\nERROR tests/test_performance.py::TestLoadTesting::test_high_concurrent_users\nERROR tests/test_performance.py::TestLoadTesting::test_database_connection_pool\nERROR tests/test_performance.py::TestStressTesting::test_large_dataset_performance\nERROR tests/test_performance.py::TestStressTesting::test_error_recovery - sql...\n================ 224 warnings, 56 errors in 132.98s (0:02:12) =================\n",
      "stderr": "",
      "return_code": 1,
      "duration": 139.17469954490662
    },
    "load_test_1": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 1 item\n\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users ERROR [100%]\n\n=================================== ERRORS ====================================\n________ ERROR at setup of TestLoadTesting.test_high_concurrent_users _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x00000223BCF34410>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000223AA4A1610>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000223BCE626C0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000223AA4A1610>\ncursor = <cursor object at 0x00000223BD02F3E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 25, 125816), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 25, 125816), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000223BCE626C0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000223AA4A1610>\ncursor = <cursor object at 0x00000223BD02F3E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 25, 125816), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 25, 125816), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000223BCE626C0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'level__0': 1, 'latitude__0': -0.1022, 'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 25, 125816), 'is_active__0': True, 'notification_duration__0': 120, 'name__0': 'Test Hospital 1', 'timezone__0': 'Africa/Kigali', 'longitude__0': 34.7617, 'verification_code__0': 'TEST001', 'level__1': 2, 'latitude__1': -0.1023, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 25, 125816), 'is_active__1': True, 'notification_duration__1': 180, 'name__1': 'Test Hospital 2', 'timezone__1': 'Africa/Kigali', 'longitude__1': 34.7618, 'verification_code__1': 'TEST002'}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'admins_id_seq' as owned by integer column 'admins(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'users_id_seq' as owned by integer column 'users(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n============================== warnings summary ===============================\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\n  C:\\Users\\Administrator\\Auth\\migrations\\env.py:21: DeprecationWarning: 'get_engine' is deprecated and will be removed in Flask-SQLAlchemy 3.2. Use 'engine' or 'engines[key]' instead. If you're using Flask-Migrate or Alembic, you'll need to update your 'env.py' file.\n    return current_app.extensions['migrate'].db.get_engine()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nERROR tests/test_performance.py::TestLoadTesting::test_high_concurrent_users\n======================== 4 warnings, 1 error in 3.44s =========================\n",
      "stderr": "",
      "return_code": 1,
      "duration": 7.0280537605285645
    },
    "load_test_2": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 1 item\n\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users ERROR [100%]\n\n=================================== ERRORS ====================================\n________ ERROR at setup of TestLoadTesting.test_high_concurrent_users _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x0000026B86560E90>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x0000026BF3AFC260>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x0000026B86504BF0>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x0000026BF3AFC260>\ncursor = <cursor object at 0x0000026B866233E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 31, 941316), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 31, 941316), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x0000026B86504BF0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x0000026BF3AFC260>\ncursor = <cursor object at 0x0000026B866233E0; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 31, 941316), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 31, 941316), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x0000026B86504BF0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 31, 941316), 'level__0': 1, 'name__0': 'Test Hospital 1', 'verification_code__0': 'TEST001', 'timezone__0': 'Africa/Kigali', 'latitude__0': -0.1022, 'notification_duration__0': 120, 'is_active__0': True, 'longitude__0': 34.7617, 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 31, 941316), 'level__1': 2, 'name__1': 'Test Hospital 2', 'verification_code__1': 'TEST002', 'timezone__1': 'Africa/Kigali', 'latitude__1': -0.1023, 'notification_duration__1': 180, 'is_active__1': True, 'longitude__1': 34.7618}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'admins_id_seq' as owned by integer column 'admins(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'users_id_seq' as owned by integer column 'users(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n============================== warnings summary ===============================\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\n  C:\\Users\\Administrator\\Auth\\migrations\\env.py:21: DeprecationWarning: 'get_engine' is deprecated and will be removed in Flask-SQLAlchemy 3.2. Use 'engine' or 'engines[key]' instead. If you're using Flask-Migrate or Alembic, you'll need to update your 'env.py' file.\n    return current_app.extensions['migrate'].db.get_engine()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nERROR tests/test_performance.py::TestLoadTesting::test_high_concurrent_users\n======================== 4 warnings, 1 error in 3.05s =========================\n",
      "stderr": "",
      "return_code": 1,
      "duration": 6.495831489562988
    },
    "load_test_3": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 1 item\n\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users ERROR [100%]\n\n=================================== ERRORS ====================================\n________ ERROR at setup of TestLoadTesting.test_high_concurrent_users _________\n\nself = <sqlalchemy.engine.base.Connection object at 0x000001D60D0931D0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x000001D67A55D9A0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x000001D60D0BD190>\n\n    def _exec_insertmany_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for an \"insertmanyvalues\"\n        operation, which will invoke DBAPI\n        cursor.execute() one or more times with individual log and\n        event hook calls.\n    \n        \"\"\"\n    \n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n        else:\n            generic_setinputsizes = None\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters = parameters\n    \n        engine_events = self._has_events or self.engine._has_events\n        if self.dialect._has_events:\n            do_execute_dispatch: Iterable[Any] = (\n                self.dialect.dispatch.do_execute\n            )\n        else:\n            do_execute_dispatch = ()\n    \n        if self._echo:\n            stats = context._get_cache_stats() + \" (insertmanyvalues)\"\n    \n        preserve_rowcount = context.execution_options.get(\n            \"preserve_rowcount\", False\n        )\n        rowcount = 0\n    \n        for imv_batch in dialect._deliver_insertmanyvalues_batches(\n            cursor,\n            str_statement,\n            effective_parameters,\n            generic_setinputsizes,\n            context,\n        ):\n            if imv_batch.processed_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor,\n                        imv_batch.processed_setinputsizes,\n                        context,\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e,\n                        sql_util._long_statement(imv_batch.replaced_statement),\n                        imv_batch.replaced_parameters,\n                        None,\n                        context,\n                    )\n    \n            sub_stmt = imv_batch.replaced_statement\n            sub_params = imv_batch.replaced_parameters\n    \n            if engine_events:\n                for fn in self.dispatch.before_cursor_execute:\n                    sub_stmt, sub_params = fn(\n                        self,\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                        True,\n                    )\n    \n            if self._echo:\n                self._log_info(sql_util._long_statement(sub_stmt))\n    \n                imv_stats = f\"\"\" {imv_batch.batchnum}/{\n                            imv_batch.total_batches\n                } ({\n                    'ordered'\n                    if imv_batch.rows_sorted else 'unordered'\n                }{\n                    '; batch not supported'\n                    if imv_batch.is_downgraded\n                    else ''\n                })\"\"\"\n    \n                if imv_batch.batchnum == 1:\n                    stats += imv_stats\n                else:\n                    stats = f\"insertmanyvalues{imv_stats}\"\n    \n                if not self.engine.hide_parameters:\n                    self._log_info(\n                        \"[%s] %r\",\n                        stats,\n                        sql_util._repr_params(\n                            sub_params,\n                            batches=10,\n                            ismulti=False,\n                        ),\n                    )\n                else:\n                    self._log_info(\n                        \"[%s] [SQL parameters hidden due to \"\n                        \"hide_parameters=True]\",\n                        stats,\n                    )\n    \n            try:\n                for fn in do_execute_dispatch:\n                    if fn(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    ):\n                        break\n                else:\n>                   dialect.do_execute(\n                        cursor,\n                        sub_stmt,\n                        sub_params,\n                        context,\n                    )\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x000001D67A55D9A0>\ncursor = <cursor object at 0x000001D60D1AB300; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 38, 601122), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 38, 601122), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x000001D60D0BD190>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: UniqueViolation\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create and configure a new app instance for each test.\"\"\"\n        # Create a temporary file to isolate the database for each test\n        db_fd, db_path = tempfile.mkstemp()\n    \n        app = create_app()\n        app.config.update({\n            'TESTING': True,\n            'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',\n            'WTF_CSRF_ENABLED': False,\n        })\n    \n        # Create the database and load test data\n        with app.app_context():\n            db.create_all()\n>           create_test_data()\n\ntests\\conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:68: in create_test_data\n    db.session.commit()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:597: in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2017: in commit\n    trans.commit(_to_root=True)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1302: in commit\n    self._prepare_impl()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:1277: in _prepare_impl\n    self.session.flush()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4341: in flush\n    self._flush(objects)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4476: in _flush\n    with util.safe_reraise():\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4437: in _flush\n    flush_context.execute()\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1143: in _emit_insert_statements\n    result = connection.execute(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1418: in execute\n    return meth(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1844: in _execute_context\n    return self._exec_insertmany_context(dialect, context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2124: in _exec_insertmany_context\n    self._handle_dbapi_exception(\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2116: in _exec_insertmany_context\n    dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x000001D67A55D9A0>\ncursor = <cursor object at 0x000001D60D1AB300; closed: -1>\nstatement = 'INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notifica...en(p0, p1, p2, p3, p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1'\nparameters = {'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 38, 601122), 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 38, 601122), 'is_active__0': True, 'is_active__1': True, ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x000001D60D0BD190>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint \"hospitals_name_key\"\nE       DETAIL:  Key (name)=(Test Hospital 1) already exists.\nE       \nE       [SQL: INSERT INTO hospitals (name, verification_code, is_active, created_at, latitude, longitude, level, timezone, notification_duration) SELECT p0::VARCHAR, p1::VARCHAR, p2::BOOLEAN, p3::TIMESTAMP WITHOUT TIME ZONE, p4::FLOAT, p5::FLOAT, p6::INTEGER, p7:: ... 414 characters truncated ...  p4, p5, p6, p7, p8, sen_counter) ORDER BY sen_counter RETURNING hospitals.id, hospitals.id AS id__1]\nE       [parameters: {'level__0': 1, 'latitude__0': -0.1022, 'timezone__0': 'Africa/Kigali', 'verification_code__0': 'TEST001', 'created_at__0': datetime.datetime(2025, 7, 5, 17, 20, 38, 601122), 'name__0': 'Test Hospital 1', 'notification_duration__0': 120, 'longitude__0': 34.7617, 'is_active__0': True, 'level__1': 2, 'latitude__1': -0.1023, 'timezone__1': 'Africa/Kigali', 'verification_code__1': 'TEST002', 'created_at__1': datetime.datetime(2025, 7, 5, 17, 20, 38, 601122), 'name__1': 'Test Hospital 2', 'notification_duration__1': 180, 'longitude__1': 34.7618, 'is_active__1': True}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\nC:\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924: IntegrityError\n---------------------------- Captured stderr setup ----------------------------\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'users_id_seq' as owned by integer column 'users(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'admissions_id_seq' as owned by integer column 'admissions(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'hospital_contacts_id_seq' as owned by integer column 'hospital_contacts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'user_settings_id_seq' as owned by integer column 'user_settings(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'referral_responses_id_seq' as owned by integer column 'referral_responses(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'patient_transfers_id_seq' as owned by integer column 'patient_transfers(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'discharges_id_seq' as owned by integer column 'discharges(id)', assuming SERIAL and omitting\nINFO  [alembic.env] No changes in schema detected.\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\n============================== warnings summary ===============================\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\ntests/test_performance.py::TestLoadTesting::test_high_concurrent_users\n  C:\\Users\\Administrator\\Auth\\migrations\\env.py:21: DeprecationWarning: 'get_engine' is deprecated and will be removed in Flask-SQLAlchemy 3.2. Use 'engine' or 'engines[key]' instead. If you're using Flask-Migrate or Alembic, you'll need to update your 'env.py' file.\n    return current_app.extensions['migrate'].db.get_engine()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nERROR tests/test_performance.py::TestLoadTesting::test_high_concurrent_users\n======================== 4 warnings, 1 error in 3.12s =========================\n",
      "stderr": "",
      "return_code": 1,
      "duration": 6.6214399337768555
    },
    "stress_testing": {
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- C:\\Python312\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.12.1', 'Platform': 'Windows-10-10.0.19045-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.3.0', 'Faker': '37.4.0', 'cov': '6.2.1', 'html': '4.1.1', 'metadata': '3.1.1'}, 'JAVA_HOME': 'C:\\\\Users\\\\Administrator\\\\OneDrive\\\\Documents\\\\jdk1.8.0_221'}\nrootdir: C:\\Users\\Administrator\\Auth\nconfigfile: pytest.ini\nplugins: anyio-4.3.0, Faker-37.4.0, cov-6.2.1, html-4.1.1, metadata-3.1.1\ncollecting ... collected 2 items / 2 deselected / 0 selected\n\n============================ 2 deselected in 0.02s ============================\n",
      "stderr": "",
      "return_code": 5,
      "duration": 3.402195453643799
    }
  }
}